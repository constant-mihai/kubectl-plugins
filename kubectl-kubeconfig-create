#!/usr/bin/env bash
set -euo pipefail

# Default values
namespace=""
profile=""
region=""
name=""
config_directory="$HOME/.kube/config.d"
verbose=false
force=false

# Show help function
show_help() {
    echo "Creates kubeconfig files for EKS clusters"
    echo ""
    echo "Usage:"
    echo "  kubectl create-kubeconfig [options] --region <region> --name <cluster_name> [--profile <profile>] [--namespace <namespace>]"
    echo ""
    echo "Options:"
    echo "  -p, --profile <profile>   AWS profile to use"
    echo "  -ns, --namespace <namespace>   Kubernetes namespace"
    echo "  -r, --region <region>     AWS region of the cluster"
    echo "  -n, --name <name>         EKS cluster name"
    echo "  -d, --directory <dir>     Directory to store kubeconfig (default: ~/.kube/config.d)"
    echo "  -f, --force               Overwrite existing kubeconfig file"
    echo "  -v, --verbose             Enable verbose output"
    echo "  -h, --help                Show this help message"
    echo ""
    echo "Example:"
    echo "  kubectl create-kubeconfig --profile dev-admin --region us-west-2 --name production-cluster"
    echo ""
    exit 0
}

# Process all arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -ns|--namespace)
            namespace="$2"
            shift 2
            ;;
        -p|--profile)
            profile="$2"
            shift 2
            ;;
        -r|--region)
            region="$2"
            shift 2
            ;;
        -n|--name)
            name="$2"
            shift 2
            ;;
        -d|--directory)
            config_directory="$2"
            shift 2
            ;;
        -f|--force)
            force=true
            shift
            ;;
        -v|--verbose)
            verbose=true
            shift
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            ;;
    esac
done

# Validate required parameters
missing_params=false

if [[ -z "$region" ]]; then
    echo "Error: Missing required parameter: --region"
    missing_params=true
fi

if [[ -z "$name" ]]; then
    echo "Error: Missing required parameter: --name"
    missing_params=true
fi

if [[ "$missing_params" == true ]]; then
    show_help
    exit 1
fi

profile_arg=""
account_id=""
if [[ -n "$profile" ]]; then
    profile_arg="--profile $profile"
fi

# Define the output file path
account_id=$(aws eks ${profile_arg} describe-cluster --name ${name} | grep -o 'arn:aws:eks:[^:]*:[^:]*:' | head -1 | cut -d':' -f5)

output_file="${config_directory}/${account_id}.${region}.${name}/${namespace:-default}.yaml"

# Check if file exists and handle force flag
if [[ -f "$output_file" && "$force" != true ]]; then
    echo "Error: Kubeconfig file already exists: $output_file"
    echo "Use --force to overwrite the existing file"
    exit 1
fi

# Show verbose output if enabled
if [[ "$verbose" == true ]]; then
    echo "Parameters:"
    echo "  Profile:    $profile"
    echo "  Region:     $region"
    echo "  Cluster:    $name"
    echo "  Directory:  $config_directory"
    echo "  Output:     $output_file"
    echo "  Force:      $force"
fi

echo "Creating kubeconfig for cluster '$name' in region '$region' using profile '$profile'..."

# Build AWS command with conditional verbose flag
aws_cmd="aws eks update-kubeconfig ${profile_arg} --kubeconfig $output_file --region $region --name $name"
if [[ "$verbose" == true ]]; then
    aws_cmd="$aws_cmd --verbose"
fi

# Run the aws command
if eval "$aws_cmd"; then
    echo "Successfully created kubeconfig at: $output_file"
    echo "To use this config, run:"
    echo "export KUBECONFIG=$output_file"
    if [ -n "$namespace" ]; then
        kubectl config set-context --current --namespace=$namespace --kubeconfig=$output_file
    fi
    exit 0
else
    echo "Failed to create kubeconfig. Please check your parameters and AWS permissions."
    exit 1
fi
